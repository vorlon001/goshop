// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: product.proto

package product

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Products_GetProducts_FullMethodName         = "/product.Products/GetProducts"
	Products_List_FullMethodName                = "/product.Products/List"
	Products_SayHelloStreamReply_FullMethodName = "/product.Products/SayHelloStreamReply"
)

// ProductsClient is the client API for Products service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductsClient interface {
	// Sends a greeting
	GetProducts(ctx context.Context, in *ProductsRequest, opts ...grpc.CallOption) (*ProductsReply, error)
	List(ctx context.Context, in *ProductsRequest, opts ...grpc.CallOption) (*ProductsReply, error)
	SayHelloStreamReply(ctx context.Context, in *ProductsRequest, opts ...grpc.CallOption) (Products_SayHelloStreamReplyClient, error)
}

type productsClient struct {
	cc grpc.ClientConnInterface
}

func NewProductsClient(cc grpc.ClientConnInterface) ProductsClient {
	return &productsClient{cc}
}

func (c *productsClient) GetProducts(ctx context.Context, in *ProductsRequest, opts ...grpc.CallOption) (*ProductsReply, error) {
	out := new(ProductsReply)
	err := c.cc.Invoke(ctx, Products_GetProducts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) List(ctx context.Context, in *ProductsRequest, opts ...grpc.CallOption) (*ProductsReply, error) {
	out := new(ProductsReply)
	err := c.cc.Invoke(ctx, Products_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) SayHelloStreamReply(ctx context.Context, in *ProductsRequest, opts ...grpc.CallOption) (Products_SayHelloStreamReplyClient, error) {
	stream, err := c.cc.NewStream(ctx, &Products_ServiceDesc.Streams[0], Products_SayHelloStreamReply_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &productsSayHelloStreamReplyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Products_SayHelloStreamReplyClient interface {
	Recv() (*ProductsReply, error)
	grpc.ClientStream
}

type productsSayHelloStreamReplyClient struct {
	grpc.ClientStream
}

func (x *productsSayHelloStreamReplyClient) Recv() (*ProductsReply, error) {
	m := new(ProductsReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProductsServer is the server API for Products service.
// All implementations must embed UnimplementedProductsServer
// for forward compatibility
type ProductsServer interface {
	// Sends a greeting
	GetProducts(context.Context, *ProductsRequest) (*ProductsReply, error)
	List(context.Context, *ProductsRequest) (*ProductsReply, error)
	SayHelloStreamReply(*ProductsRequest, Products_SayHelloStreamReplyServer) error
	mustEmbedUnimplementedProductsServer()
}

// UnimplementedProductsServer must be embedded to have forward compatible implementations.
type UnimplementedProductsServer struct {
}

func (UnimplementedProductsServer) GetProducts(context.Context, *ProductsRequest) (*ProductsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProducts not implemented")
}
func (UnimplementedProductsServer) List(context.Context, *ProductsRequest) (*ProductsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedProductsServer) SayHelloStreamReply(*ProductsRequest, Products_SayHelloStreamReplyServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloStreamReply not implemented")
}
func (UnimplementedProductsServer) mustEmbedUnimplementedProductsServer() {}

// UnsafeProductsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductsServer will
// result in compilation errors.
type UnsafeProductsServer interface {
	mustEmbedUnimplementedProductsServer()
}

func RegisterProductsServer(s grpc.ServiceRegistrar, srv ProductsServer) {
	s.RegisterService(&Products_ServiceDesc, srv)
}

func _Products_GetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).GetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Products_GetProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).GetProducts(ctx, req.(*ProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Products_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).List(ctx, req.(*ProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_SayHelloStreamReply_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProductsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProductsServer).SayHelloStreamReply(m, &productsSayHelloStreamReplyServer{stream})
}

type Products_SayHelloStreamReplyServer interface {
	Send(*ProductsReply) error
	grpc.ServerStream
}

type productsSayHelloStreamReplyServer struct {
	grpc.ServerStream
}

func (x *productsSayHelloStreamReplyServer) Send(m *ProductsReply) error {
	return x.ServerStream.SendMsg(m)
}

// Products_ServiceDesc is the grpc.ServiceDesc for Products service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Products_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.Products",
	HandlerType: (*ProductsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProducts",
			Handler:    _Products_GetProducts_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Products_List_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHelloStreamReply",
			Handler:       _Products_SayHelloStreamReply_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "product.proto",
}
